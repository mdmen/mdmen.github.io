@use 'sass:math';
@use "@/styles/helpers";

$imagePath: './images/';
$gridColumns: 12;
$gridRows: 9;
$minBodyYDeg: -40;
$maxBodyYDeg: 40;
$minBodyXDeg: 20;
$maxBodyXDeg: -30;
$minHeadYDeg: -35;
$maxHeadYDeg: 35;
$minHeadXDeg: 20;
$maxHeadXDeg: -30;
$minArmXDeg: 120;
$maxArmXDeg: 30;
$minLeftSideBrightness: 0.7;
$maxLeftSideBrightness: 0.94;
$minRightSideBrightness: 0.9;
$maxRightSideBrightness: 1.05;
$minFaceAxisBrightness: 0.4;
$maxFaceAxisBrightness: 0.55;
$minBottomSideBrightness: 0.85;
$maxBottomSideBrightness: 1.05;
$minFrontSideBrightness: 0.85;
$maxFrontSideBrightness: 1.04;
$minShadowRotateX: 80;
$maxShadowRotateX: 90;

@function lerp-index-value($minValue, $maxValue, $index, $total, $shouldRound: false) {
  $value: calc(($index - 1) / ($total - 1));
  $result: helpers.lerp($minValue, $maxValue, $value);

  @if $shouldRound {
    @return math.round($result);
  }

  @return $result;
}

@mixin body-part-bg-positions($part, $positions) {
  @each $side, $pos in $positions {
    .#{$part} .part-side-#{$side} {
      background-position: $pos;
    }
  }
}

:root {
  --body-width: 148px;
  --body-height: 220px;
  --body-r-x: 0;
  --body-r-y: 0;
  --shadow-r-x: 80deg;
  --head-r-x: 0;
  --head-r-y: 0;
  --arm-r-x: 0;
  --face-b-x: 0.5;
  --face-b-y: 0.5;
  --l-side-b: 1;
  --r-side-b: 1;
  --b-side-b: 1;
  --f-side-b: 1;
  --fly-pos-x: 49vw;
  --fly-pos-y: -15vh;
}

$characters: "woman" "📱" "#91d8e8" "#2e93cc" "#7fba2b",
  "man" "🎮" "#91d8e8" "#2e93cc" "#7fba2b",
  "soldier" "🧨" "#bbf6f7" "#59d7ef" "#dac43e",
  "orc" "🍗" "#891d02" "#2d0d0b" "#4e4d5b",
  "robot" "⚙️" "#302557" "#000" "#b5b5b5",
  "adventurer" "💎" "#a7b2b7" "#507c99" "#fdcd7d";

@each $id, $fly, $skyBottom, $skyTop, $ground in $characters {
  :root:has([data-character=#{$id}]:checked) {
    --character-texture: url(#{$imagePath}#{$id}.webp);
    --fly-object: '#{$fly}';
    --sky-bottom-color: #{$skyBottom};
    --sky-top-color: #{$skyTop};
    --ground-base-color: #{$ground};
  }
}

.container {
  height: 100vh;
  overflow: hidden;
  font-family: system-ui, sans-serif;
}

.ambient {
  position: absolute;
  inset: 0;
  perspective: 700px;
  overflow: hidden;
  z-index: 0;
}

.ambient::before,
.ambient::after {
  content: "";
  position: absolute;
  left: 0;
  width: 100%;
}

.ambient::before {
  top: 0;
  height: 70%;
  background-image: linear-gradient(0deg, var(--sky-bottom-color) 40%, var(--sky-bottom-color) 40%, var(--sky-top-color) 100%);
  z-index: 1;
}

.ambient::after {
  --ground-far-color: oklch(from var(--ground-base-color) calc(l - 0.3) c h);
  --ground-stripe-color: oklch(from var(--ground-base-color) calc(l - 0.4) c h / 0.2);

  bottom: 0;
  height: 200%;
  background-image:
    repeating-linear-gradient(transparent 0, transparent 40px,
      var(--ground-stripe-color) 40px,
      var(--ground-stripe-color) 47px),
    repeating-linear-gradient(90deg, transparent 0, transparent 40px,
      var(--ground-stripe-color) 40px,
      var(--ground-stripe-color) 42px),
    linear-gradient(0deg, var(--ground-base-color) 0%, var(--ground-far-color) 100%);
  background-size: 100% 47px, 42px, 100%;
  rotate: x 85deg;
  scale: 3 1 1;
  transform-origin: bottom;
}

.character-wrapper {
  position: fixed;
  top: 0;
  display: flex;
  align-items: flex-end;
  justify-content: center;
  width: 100%;
  height: 100vh;
  height: 100dvh;
  padding-bottom: 25vh;
  pointer-events: none;
}

.character {
  perspective-origin: top;
  perspective: 1000px;
  scale: var(--character-scale, 0.7);
}

@media (width >=64rem) {
  .character {
    --character-scale: 0.8;
  }
}

/* preload images */
.character::before {
  content: "";
  width: 1px;
  height: 1px;
  position: absolute;
  animation: preload-images 0.1s;
  animation-delay: 1s;
  opacity: 0.1;
  z-index: -1;
}

@keyframes preload-images {
  to {
    background-image: url(#{$imagePath}man.webp),
    url(#{$imagePath}woman.webp),
    url(#{$imagePath}adventurer.webp),
    url(#{$imagePath}orc.webp),
    url(#{$imagePath}soldier.webp),
    url(#{$imagePath}robot.webp);
  }
}

.character::after {
  content: "";
  position: absolute;
  top: calc(100% + 65px);
  left: 80%;
  background-image: linear-gradient(0, transparent 5%, rgba(0, 0, 0, 0.25) 5%, transparent 100%);
  width: 148px;
  height: 200px;
  z-index: -1;
  transform: rotateX(var(--shadow-r-x)) skewX(-50deg);
  filter: blur(15px);
  transition: transform .5s;
}

.body {
  position: relative;
  transform-style: preserve-3d;
  transform: rotateY(var(--body-r-y)) rotateX(var(--body-r-x));
  transition: transform 0.5s ease;
  transform-origin: bottom center;
}

.pelvis {
  position: absolute;
  width: 100%;
  left: 0;
  bottom: 0;
  transform: rotateX(calc(var(--body-r-x) * -1));
  transform-style: preserve-3d;
  transition: transform 0.5s ease;
}

.part {
  position: absolute;
  transform-style: preserve-3d;
  transition: transform 0.5s ease;
  width: var(--part-width);
  height: var(--part-height);
}

.part-side {
  position: absolute;
  width: var(--part-width);
  height: var(--part-height);
  background-image: var(--character-texture);
  background-repeat: no-repeat;
  transition: filter .3s linear;
  backface-visibility: hidden;
}

.part-side-left,
.part-side-right {
  width: var(--part-depth);
}

.part-side-top,
.part-side-bottom {
  height: var(--part-depth);
}

.part-side-front {
  translate: 0 0 calc(var(--part-depth) / 2);
  filter: brightness(var(--f-side-b));
}

.part-side-back {
  rotate: y 180deg;
  translate: 0 0 calc(var(--part-depth) / 2 * -1);
  filter: brightness(0.95);
}

.part-side-top {
  rotate: x 90deg;
  translate: 0 calc(var(--part-depth) / 2 * -1) 0;
  filter: brightness(1.02);
}

.part-side-bottom {
  rotate: x -90deg;
  translate: 0 calc(var(--part-height) - (var(--part-depth) / 2)) 0;
  filter: brightness(var(--b-side-b));
}

.part-side-left {
  rotate: y 90deg;
  translate: calc(var(--part-width) - (var(--part-depth) / 2)) 0 0;
  filter: brightness(var(--l-side-b));
}

.part-side-right {
  rotate: y -90deg;
  translate: calc(var(--part-depth) / 2 * -1) 0 0;
  filter: brightness(var(--r-side-b));
}

.head {
  --part-width: 148px;
  --part-height: 148px;
  --part-depth: 148px;

  bottom: 100%;
  transform: rotateY(var(--head-r-y)) rotateX(var(--head-r-x));
  transform-origin: bottom center;
}

.head .part-side-front {
  filter: brightness(calc(var(--face-b-x) + var(--face-b-y)))
}

.head .part-side-bottom {
  --b-side-b: 0.96;
}

@include body-part-bg-positions(head, (front: -218px -158px,
    back: -514px -158px,
    top: -218px -10px,
    bottom: -218px -306px,
    left: -367px -158px,
    right: -72px -158px,
  ));

.torso {
  --part-width: var(--body-width);
  --part-height: var(--body-height);
  --part-depth: 72px;

  position: relative;
}

@include body-part-bg-positions(torso, (front: -476px -404px,
    back: -694px -404px,
    top: -476px -330px,
    bottom: -476px -624px,
    left: -624px -404px,
    right: -404px -404px,
  ));

.arm {
  --part-width: 72px;
  --part-height: 216px;
  --part-depth: 72px;

  top: 0;
  transform: rotateX(var(--arm-r-x));
  transform-origin: 50% 10%;
}

.right-arm {
  right: 100%;
}

@include body-part-bg-positions(right-arm, (front: -112px -480px,
    back: -258px -480px,
    top: -112px -410px,
    bottom: -112px -696px,
    left: -186px -480px,
    right: -40px -480px,
  ));

.left-arm {
  left: 100%;
}

@include body-part-bg-positions(left-arm, (front: -852px -92px,
    back: -708px -92px,
    top: -852px -22px,
    bottom: -852px -308px,
    left: -926px -92px,
    right: -780px -92px,
  ));

.leg {
  --part-width: 72px;
  --part-height: 216px;
  --part-depth: 72px;

  top: 100%;
}

.right-leg {
  left: 0;
}

@include body-part-bg-positions(right-leg, (front: -354px -726px,
    back: -510px -726px,
    top: -354px -656px,
    bottom: -354px -944px,
    left: -430px -726px,
    right: -278px -726px,
  ));

.left-leg {
  right: 0;
}

@include body-part-bg-positions(left-leg, (front: -856px -704px,
    back: -704px -704px,
    top: -856px -634px,
    bottom: -856px -922px,
    left: -932px -704px,
    right: -776px -704px,
  ));

.grid {
  position: relative;
  display: grid;
  grid-template-columns: repeat($gridColumns, 1fr);
  grid-template-rows: repeat($gridRows, 1fr);
  height: 100%;
}

.cell:has(:focus-visible) {
  outline: 2px solid rgb(0 0 0 / 0.3);
}

.fly {
  --fly-size: clamp(3.125rem, 2.309vw + 2.527rem, 4.375rem);
  --fly-half-size: calc(var(--fly-size) / 2);

  position: absolute;
  top: 0;
  left: 0;
  font-size: clamp(3.125rem, 2.309vw + 2.527rem, 4.375rem);
  translate: calc(var(--fly-pos-x) - var(--fly-half-size)) calc(var(--fly-pos-y) - var(--fly-half-size));
  transition: translate .3s linear;
  pointer-events: none;
  z-index: 1;
  animation: fly-pulse .8s infinite alternate ease-in-out;
}

@keyframes fly-pulse {
  from {
    scale: 0.9;
  }

  to {
    scale: 1.1;
  }
}

.fly::before {
  content: var(--fly-object);
}

$gridItemIndex: 1;
$flyXPercentStepOffset: calc((1 / $gridColumns * 100) / 2);
$flyYPercentStepOffset: calc((1 / $gridRows * 100) / 2);

@for $i from 1 through $gridRows {

  $flyPosY: (
    calc($i / $gridRows) * 100 - $flyYPercentStepOffset) * 1vh;
  $bodyRotateX: lerp-index-value($minBodyXDeg, $maxBodyXDeg, $i, $gridRows, true) * 1deg;
  $headRotateX: lerp-index-value($minHeadXDeg, $maxHeadXDeg, $i, $gridRows, true) * 1deg;
  $armRotateX: lerp-index-value($minArmXDeg, $maxArmXDeg, $i, $gridRows, true) * 1deg;
  $faceBrightnessY: lerp-index-value($maxFaceAxisBrightness, $minFaceAxisBrightness, $i, $gridRows
  );
$bottomSideBrightness: lerp-index-value($maxBottomSideBrightness, $minBottomSideBrightness, $i, $gridRows);

@for $j from 1 through $gridColumns {

  :root:where(:has(.cell:nth-child(#{$gridItemIndex}) :checked)),
  :root:has(.cell:nth-child(#{$gridItemIndex}):hover) {
    --body-r-y: #{lerp-index-value($minBodyYDeg, $maxBodyYDeg, $j, $gridColumns, true) * 1deg};
    --body-r-x: #{$bodyRotateX};
    --head-r-y: #{lerp-index-value($minHeadYDeg, $maxHeadYDeg, $j, $gridColumns, true)  * 1deg};
    --head-r-x: #{$headRotateX};
    --arm-r-x: #{$armRotateX};
    --face-b-x: #{lerp-index-value($maxFaceAxisBrightness, $minFaceAxisBrightness, $j, $gridColumns)};
    --face-b-y: #{$faceBrightnessY};
    --l-side-b: #{lerp-index-value($maxLeftSideBrightness, $minLeftSideBrightness, $j, $gridColumns)};
    --r-side-b: #{lerp-index-value($minRightSideBrightness, $maxRightSideBrightness, $j, $gridColumns)};
    --b-side-b: #{$bottomSideBrightness};
    --f-side-b: #{lerp-index-value($maxFrontSideBrightness, $minFrontSideBrightness, $j, $gridColumns)};
    --fly-pos-x: #{math.round((calc($j / $gridColumns) * 100 - $flyXPercentStepOffset) * 1vw)};
    --fly-pos-y: #{math.round($flyPosY)};
    --shadow-r-x: #{lerp-index-value($minShadowRotateX, $maxShadowRotateX, $j, $gridColumns) * 1deg};
  }

  $gridItemIndex: $gridItemIndex + 1;
}
}
